#Spotify data was downloaded from Kaggle (https://www.kaggle.com/datasets/equinxx/spotify-top-50-songs-in-2021?select=spotify_top50_2021.csv)
#A table was created to insert Spotify data
#Analystics was used to insert date with SQL


Data to create the table:
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

#Inserted the Spotify Data .csv into the table

#Figured our different ways to use SQL to access song data

#Selected all infomation from Sportify table
SELECT * FROM BIT_DB.Spotifydata;

#I figured out the average popularity by artist and track
SELECT artist_name,
track_name, avg(popularity) 
FROM BIT_DB.Spotifydata 
GROUP BY artist_name, track_name;

#Most popular songs by an artis were listed
SELECT popularity, artist_name 
FROM BIT_DB.Spotifydata;

#Then I determined the most popular 3 tracks 
SELECT track_name, MAX(popularity)
FROM BIT_DB.Spotifydata
GROUP BY track_name
LIMIT 3;

#Then the fastest tempo and song that includes the word "heart"
SELECT track_name, MAX(tempo)
FROM BIT_DB.Spotifydata
WHERE track_name like '%heart%'
GROUP BY track_name;

#Track names and tempo were grouped by artist and popularity by energy level
SELECT track_name, min(tempo)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, popularity
ORDER BY energy desc
LIMIT 10;

#Then the most popular dance songs were found
SELECT artist_name, max (popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, popularity
ORDER BY danceability asc
LIMIT 10;

#The top 5 longest songs
SELECT track_name, artist_name
FROM BIT_DB.Spotifydata
GROUP BY track_name, artist_name
ORDER BY duration_ms desc
LIMIT 5;

#The top 3 shortest songs
SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name
ORDER BY duration_ms asc
LIMIT 3;

#Then the most danceable songs
SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name
ORDER BY danceability asc
LIMIT 10;

#The most popular track name
SELECT track_name, max (popularity) 
FROM BIT_DB.Spotifydata
ORDER BY popularity
LIMIT 1;

#The least loud sound
SELECT artist_name, track_name, min(loudness)
FROM BIT_DB.Spotifydata
ORDER BY artist_name
